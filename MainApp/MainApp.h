#pragma once

#include <QMainWindow>
#include <QWidget>

// If your header class allows, you can avoid including the header by using
// forward declaration. That will drastically reduce compilation time
// and avoid circular dependencies.
namespace Ui {
  class MainApp;
}

class MainApp : public QMainWindow
{
  // This macro allows the class to define its own signals/slos
  // through Qt's meta object system.
  Q_OBJECT

public:
  // The parent parameter is a QWidget UI component like QDialog, textbox etc.
  // If you define a parent-child relationship between your window, layout, and
  // other UI widgets, the memory management of your application will be easier.
  // Deleting the parent is enough because its destructor will take care of also
  // deleting its child recursively.
  MainApp(QWidget *parent = nullptr);

  // This desctructor will be called when MainWindow releases its own
  // memory by recursively iterating through its children and calling
  // their destructor.
  ~MainApp();

  // Set text to the textEdit
  void setText(const QString& name);

  // Get text from the textEdit
  QString getText() const;

private:

  // Ui::MainApp is a C++ transcription of the MainApp.ui design file
  // generated by the Qt's User Interface Compiler (uic)
  // The ui member variable will allow you to interact with your C++
  // UI components (QLabel, QPushButton ...)
  Ui::MainApp *ui;

// Qt uses a specific slots keywork to identify slots. Since a slot is a function, you can
// always adjust the visibility (public, protected or private) depending on you needs.
private slots:
  void onTestBtnClick();
};
